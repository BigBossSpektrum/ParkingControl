"""
Servicio de impresi√≥n para integraci√≥n con impresoras t√©rmicas Epson
Especialmente configurado para el modelo M244A
"""

import os
import logging
from io import BytesIO
from PIL import Image
import pytz
from django.conf import settings
from django.utils import timezone
from django.core.cache import cache
from escpos.printer import Usb, Serial, Network
from escpos.exceptions import Error as EscposError
from .models import PrinterConfiguration, PrintJob

logger = logging.getLogger(__name__)

def get_bogota_time(dt=None):
    """Convierte una fecha/hora a la zona horaria de Bogot√°"""
    if dt is None:
        dt = timezone.now()
    
    bogota_tz = pytz.timezone('America/Bogota')
    return dt.astimezone(bogota_tz)

class PrinterService:
    """Servicio para manejar la impresi√≥n en impresoras t√©rmicas"""
    
    def __init__(self):
        self.active_printer = None
        self.printer_config = None
        # Cargar modo simulaci√≥n desde cache/configuraci√≥n
        self.simulation_mode = cache.get('printer_simulation_mode', True)  # Por defecto True para demos
        self._load_active_printer()
        logger.info(f"PrinterService inicializado - Modo simulaci√≥n: {self.simulation_mode}")
    
    def _load_active_printer(self):
        """Carga la configuraci√≥n de la impresora activa"""
        try:
            self.printer_config = PrinterConfiguration.objects.filter(is_active=True).first()
            if not self.printer_config:
                logger.warning("No hay impresoras configuradas como activas")
                return False
                
            logger.info(f"Impresora activa cargada: {self.printer_config.name}")
            return True
        except Exception as e:
            logger.error(f"Error cargando configuraci√≥n de impresora: {e}")
            return False
    
    def reload_printer_config(self):
        """Recarga la configuraci√≥n de la impresora"""
        return self._load_active_printer()
    
    def enable_simulation_mode(self, enable=True):
        """Habilita o deshabilita el modo simulaci√≥n"""
        self.simulation_mode = enable
        # Guardar en cache para persistir entre reinicios
        cache.set('printer_simulation_mode', enable, 86400)  # 24 horas
        if enable:
            logger.info("Modo simulaci√≥n HABILITADO - Las impresiones se simular√°n")
        else:
            logger.info("Modo simulaci√≥n DESHABILITADO - Se intentar√° imprimir en hardware real")
    
    def reload_simulation_mode(self):
        """Recarga el modo simulaci√≥n desde el cache"""
        self.simulation_mode = cache.get('printer_simulation_mode', True)
        logger.info(f"Modo simulaci√≥n recargado: {self.simulation_mode}")
        return self.simulation_mode
    
    def _get_printer_instance(self):
        """Obtiene una instancia de la impresora basada en la configuraci√≥n"""
        if not self.printer_config:
            raise Exception("No hay impresora configurada")
        
        try:
            if self.printer_config.printer_type == 'USB':
                connection = self.printer_config.connection_string
                
                # Si tenemos un nombre de impresora de Windows, usar Win32Raw directamente
                if connection and ("Receipt" in connection or "EPSON" in connection):
                    logger.info(f"Usando Win32Raw para impresora Windows: {connection}")
                    from escpos.printer import Win32Raw
                    printer = Win32Raw(connection)
                else:
                    # Para impresoras USB directas, intentar encontrar autom√°ticamente
                    logger.info("Intentando conexi√≥n USB directa con vendor/product IDs")
                    try:
                        # Intentar con los IDs comunes de Epson
                        printer = Usb(0x04b8, 0x0202)  # Epson M244A com√∫n
                    except:
                        try:
                            printer = Usb(0x04b8, 0x0e15)  # Otro ID com√∫n de Epson
                        except:
                            raise Exception("No se pudo conectar por USB directo")
                            
            elif self.printer_config.printer_type == 'SERIAL':
                port = self.printer_config.connection_string
                printer = Serial(port, baudrate=9600, timeout=1)
                
            elif self.printer_config.printer_type == 'NETWORK':
                host_port = self.printer_config.connection_string.split(':')
                host = host_port[0]
                port = int(host_port[1]) if len(host_port) > 1 else 9100
                printer = Network(host, port)
                
            else:
                raise Exception(f"Tipo de impresora no soportado: {self.printer_config.printer_type}")
                
            return printer
            
        except Exception as e:
            logger.error(f"Error conectando con la impresora: {e}")
            raise
    
    def print_qr_ticket(self, cliente):
        """Imprime un ticket con c√≥digo QR para el cliente usando configuraci√≥n personalizada"""
        # Recargar configuraci√≥n antes de cada impresi√≥n
        self.reload_printer_config()
        
        if not self.printer_config:
            logger.error("No hay impresora configurada")
            return False
        
        # Cargar configuraci√≥n de dise√±o personalizada desde BD o cache
        design_config = self._load_design_config()
        logger.info(f"Usando configuraci√≥n de dise√±o: {design_config}")
            
        # Crear registro de trabajo de impresi√≥n
        print_job = PrintJob.objects.create(
            printer=self.printer_config,
            client_id=cliente.id,
            content_type='QR_CODE',
            status='PENDING'
        )
        
        try:
            print_job.status = 'PRINTING'
            print_job.save()
            
            # Modo simulaci√≥n para pruebas sin hardware
            if self.simulation_mode:
                logger.info(f"üé≠ SIMULACI√ìN: Imprimiendo ticket para cliente {cliente.id}")
                logger.info(f"   - Datos: {cliente.get_display_name()} - {cliente.matricula}")
                logger.info(f"   - QR: {cliente.qr_image.url if cliente.qr_image else 'No disponible'}")
                logger.info(f"   - Impresora: {self.printer_config.name}")
                logger.info(f"   - Configuraci√≥n de dise√±o aplicada: {design_config}")
                
                print_job.status = 'SUCCESS'
                print_job.completed_at = timezone.now()
                print_job.save()
                
                logger.info(f"‚úÖ SIMULACI√ìN: Ticket 'impreso' exitosamente para cliente {cliente.id}")
                return True

            # Imprimir con configuraci√≥n personalizada
            return self._print_with_custom_design(cliente, print_job, design_config)
            
        except Exception as e:
            error_msg = f"Error imprimiendo ticket: {str(e)}"
            logger.error(error_msg)
            
            print_job.status = 'FAILED'
            print_job.error_message = error_msg
            print_job.completed_at = timezone.now()
            print_job.save()
            
            return False

    def _load_design_config(self):
        """Carga la configuraci√≥n de dise√±o desde BD o cache"""
        try:
            from .models import TicketDesignConfiguration
            
            # Intentar cargar desde la base de datos
            active_config = TicketDesignConfiguration.objects.filter(is_active=True).first()
            
            if active_config:
                config = active_config.to_dict()
                logger.info(f"Configuraci√≥n cargada desde BD: {active_config.name}")
                return config
            else:
                # Fallback al cache
                config = cache.get('printer_design_config', {})
                if config:
                    logger.info("Configuraci√≥n cargada desde cache")
                    return config
                else:
                    logger.info("Usando configuraci√≥n por defecto")
                    return {}
                    
        except Exception as e:
            logger.warning(f"Error cargando configuraci√≥n de dise√±o: {e}, usando por defecto")
            return {}

    def _print_with_custom_design(self, cliente, print_job, design_config=None):
        """Imprime el ticket aplicando la configuraci√≥n de dise√±o personalizada"""
        if not design_config:
            design_config = {}
            
        # Configuraci√≥n por defecto
        default_config = {
            'font': 'courier',
            'fontSize': 12,
            'ticketWidth': 80,
            'showLogo': True,
            'showFecha': True,
            'showQr': True,
            'showFooter': True,
            'headerText': 'SISTEMA DE PARKING\nControl de Acceso',
            'footerText': 'Conserve este ticket\nGracias por su visita'
        }
        
        # Combinar configuraci√≥n por defecto con la personalizada
        config = {**default_config, **design_config}
        
        try:
            printer = self._get_printer_instance()
            
            # Configurar codificaci√≥n
            printer.charcode('CP437')
            
            # Encabezado personalizado
            if config.get('showLogo', True):
                printer.set(align='center', bold=True, double_width=True, double_height=True)
                header_lines = config.get('headerText', 'SISTEMA DE PARKING').split('\n')
                for line in header_lines:
                    printer.text(line + '\n')
                    
                printer.text('=' * 32 + '\n')
                printer.text('\n')
            
            # Informaci√≥n del cliente con formato personalizado
            printer.set(align='left', bold=False, double_width=False, double_height=False)
            
            if config.get('showFecha', True):
                fecha_actual = get_bogota_time()
                printer.text(f"Fecha: {fecha_actual.strftime('%d/%m/%Y %H:%M')}\n")
            
            printer.text(f"ID: {cliente.id}\n")
            printer.text(f"Cedula: {cliente.cedula or 'N/A'}\n")
            printer.text(f"Nombre: {cliente.nombre or 'N/A'}\n")
            printer.text(f"Vehiculo: {cliente.get_tipo_vehiculo_display()}\n")
            printer.text(f"Matricula: {cliente.matricula}\n")
            
            if cliente.fecha_entrada:
                fecha_entrada_bogota = get_bogota_time(cliente.fecha_entrada)
                fecha_entrada = fecha_entrada_bogota.strftime('%d/%m/%Y %H:%M')
                printer.text(f"Entrada: {fecha_entrada}\n")
            
            printer.text('\n')
            
            # C√≥digo QR personalizado
            if config.get('showQr', True) and cliente.qr_image:
                try:
                    if os.path.exists(cliente.qr_image.path):
                        qr_image = Image.open(cliente.qr_image.path)
                        
                        # Redimensionar seg√∫n la configuraci√≥n
                        qr_size = min(200, int(config.get('ticketWidth', 80)) * 2)
                        qr_image = qr_image.resize((qr_size, qr_size), Image.Resampling.LANCZOS)
                        
                        if qr_image.mode != 'RGB':
                            qr_image = qr_image.convert('RGB')
                        
                        printer.set(align='center')
                        printer.image(qr_image, center=True)
                        printer.text('\n')
                        
                except Exception as qr_error:
                    logger.warning(f"Error procesando QR: {qr_error}")
                    # En caso de error, no imprimir nada para mantener el QR limpio
                    pass
            
            # Pie de p√°gina personalizado
            if config.get('showFooter', True):
                printer.set(align='center', bold=False)
                printer.text('-' * 32 + '\n')
                footer_lines = config.get('footerText', 'Gracias por su visita').split('\n')
                for line in footer_lines:
                    printer.text(line + '\n')
            
            # Cortar papel
            printer.text('\n' * 3)
            printer.cut()
            
            printer.close()
            
            # Actualizar estado del trabajo
            print_job.status = 'SUCCESS'
            print_job.completed_at = timezone.now()
            print_job.save()
            
            logger.info(f"Ticket impreso exitosamente para cliente {cliente.id} con configuraci√≥n personalizada")
            return True
            
        except Exception as e:
            error_msg = f"Error en _print_with_custom_design: {str(e)}"
            logger.error(error_msg)
            
            print_job.status = 'FAILED'
            print_job.error_message = error_msg
            print_job.completed_at = timezone.now()
            print_job.save()
            
            return False

    def test_printer(self):
        """Prueba la conexi√≥n y funcionalidad de la impresora"""
        if not self.printer_config:
            return False, "No hay impresora configurada"
            
        try:
            printer = self._get_printer_instance()
            
            # Imprimir p√°gina de prueba
            printer.set(align='center', font='a', bold=True, double_height=True)
            printer.text("PRUEBA DE IMPRESORA\n")
            printer.text("=" * self.printer_config.chars_per_line + "\n")
            
            printer.set(align='left', font='a', bold=False, double_height=False)
            printer.text(f"Modelo: {self.printer_config.model}\n")
            printer.text(f"Conexion: {self.printer_config.printer_type}\n")
            fecha_bogota = get_bogota_time()
            printer.text(f"Fecha: {fecha_bogota.strftime('%d/%m/%Y %H:%M')}\n")
            
            printer.text("-" * self.printer_config.chars_per_line + "\n")
            printer.text("Si puede leer este texto,\n")
            printer.text("la impresora funciona correctamente.\n")
            printer.text("=" * self.printer_config.chars_per_line + "\n")
            
            printer.cut()
            printer.close()
            
            logger.info("Prueba de impresora exitosa")
            return True, "Impresora funcionando correctamente"
            
        except Exception as e:
            error_msg = f"Error en prueba de impresora: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def get_printer_status(self):
        """Obtiene el estado actual de la impresora"""
        if not self.printer_config:
            return {
                'configured': False,
                'connected': False,
                'message': 'No hay impresora configurada'
            }
        
        try:
            printer = self._get_printer_instance()
            printer.close()  # Solo probamos la conexi√≥n
            
            return {
                'configured': True,
                'connected': True,
                'printer_name': self.printer_config.name,
                'printer_model': self.printer_config.model,
                'connection_type': self.printer_config.printer_type,
                'message': 'Impresora conectada y lista'
            }
            
        except Exception as e:
            return {
                'configured': True,
                'connected': False,
                'printer_name': self.printer_config.name,
                'printer_model': self.printer_config.model,
                'connection_type': self.printer_config.printer_type,
                'message': f'Error de conexi√≥n: {str(e)}'
            }

    def print_preview_ticket(self, cliente_data, design_config=None):
        """
        Imprime un ticket de previsualizaci√≥n con datos personalizados
        
        Args:
            cliente_data (dict): Datos del cliente para el ticket
            design_config (dict): Configuraci√≥n de dise√±o personalizada
        """
        try:
            # Verificar modo simulaci√≥n
            simulation_mode = cache.get('printer_simulation_mode', False)
            
            if simulation_mode:
                logger.info("=== MODO SIMULACI√ìN ACTIVO ===")
                logger.info(f"Simulando impresi√≥n de ticket de previsualizaci√≥n para: {cliente_data.get('nombre', 'Cliente')}")
                logger.info(f"Configuraci√≥n de dise√±o aplicada: {design_config}")
                return True
            
            # Cargar configuraci√≥n de dise√±o desde BD si no se proporciona
            if not design_config:
                design_config = self._load_design_config()
                
            # Configuraci√≥n por defecto si no hay ninguna
            default_config = {
                'font': 'courier',
                'fontSize': 12,
                'ticketWidth': 80,
                'showLogo': True,
                'showFecha': True,
                'showQr': True,
                'showFooter': True,
                'headerText': 'SISTEMA DE PARKING\nControl de Acceso',
                'footerText': 'Conserve este ticket\nGracias por su visita'
            }
            
            # Combinar configuraci√≥n por defecto con la personalizada
            config = {**default_config, **design_config}
            
            logger.info(f"Imprimiendo ticket de previsualizaci√≥n con configuraci√≥n: {config}")
            
            # Verificar configuraci√≥n de impresora
            if not self.printer_config:
                logger.error("No hay impresora configurada")
                return False
                
            printer = self._get_printer_instance()
            
            # Configurar codificaci√≥n
            printer.charcode('CP437')
            
            # Encabezado personalizado
            if config.get('showLogo', True):
                printer.set(align='center', bold=True, double_width=True, double_height=True)
                header_lines = config.get('headerText', 'SISTEMA DE PARKING').split('\n')
                for line in header_lines:
                    printer.text(line + '\n')
                    
                printer.text('=' * 32 + '\n')
                printer.text('\n')
            
            # Informaci√≥n del cliente con formato personalizado
            printer.set(align='left', bold=False)
            
            if config.get('showFecha', True):
                fecha_actual = get_bogota_time()
                printer.text(f"Fecha: {fecha_actual.strftime('%d/%m/%Y %H:%M')}\n")
                
            printer.text(f"Cedula: {cliente_data.get('cedula', 'N/A')}\n")
            printer.text(f"Nombre: {cliente_data.get('nombre', 'N/A')}\n")
            printer.text(f"Vehiculo: {cliente_data.get('tipo_vehiculo', 'auto').upper()}\n")
            printer.text(f"Placa: {cliente_data.get('placa', 'N/A')}\n")
            
            printer.text('\n')
            
            # C√≥digo QR personalizado
            if config.get('showQr', True):
                qr_data = f"PREVIEW_{cliente_data.get('cedula', '000000')}_{fecha_actual.strftime('%Y%m%d%H%M')}"
                printer.set(align='center')
                try:
                    printer.qr(qr_data, size=6)
                except Exception as qr_error:
                    logger.warning(f"Error generando QR: {qr_error}")
                    # En caso de error, no imprimir nada para mantener el QR limpio
                    pass
                
                printer.text('\n')
            
            # Pie de p√°gina personalizado
            if config.get('showFooter', True):
                printer.set(align='center', bold=False)
                printer.text('-' * 32 + '\n')
                footer_lines = config.get('footerText', 'Gracias por su visita').split('\n')
                for line in footer_lines:
                    printer.text(line + '\n')
                    
                printer.text('** TICKET DE PREVISUALIZACI√ìN **\n')
            
            # Cortar papel
            printer.text('\n' * 3)
            printer.cut()
            
            printer.close()
            
            logger.info(f"Ticket de previsualizaci√≥n impreso exitosamente para {cliente_data.get('nombre', 'Cliente')}")
            return True
            
        except Exception as e:
            error_msg = f"Error imprimiendo ticket de previsualizaci√≥n: {str(e)}"
            logger.error(error_msg)
            return False

# Instancia global del servicio
printer_service = PrinterService()
